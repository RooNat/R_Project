---
title: "Lecture1415_Practice"
author: "YujieWang"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

#Lecture 15

```{r}
library(tidyverse)
```
```{r}
num_trials<-1000
sample_size<-30
set.seed(0)
q<-0.5

df<-data.frame(trial=1:num_trials)

df<-df%>%mutate(simulation=map(.x=trial,.f=~rbinom(sample_size,1,q)))

sample_df<-df%>%mutate(sample_mean=map_dbl(.x=simulation,.f=~mean(.x)))

ggplot()+theme_bw()+geom_density(data=sample_df,aes((x=sample_mean),color="Sample",linetype="Sample"))+labs(x="Mean",y="Density")+
  geom_vline(aes(xintercept=q, color="Population",linetype="Population"))+scale_color_manual(name="Legend",values = c("Sample"="red","Population"="blue"))+scale_linetype_manual(name="Legend",values=c("Sample"="solid","Population"="dashed"))


```

```{r}
set.seed(0)
max_sample_size<-10000
num_trials_per_sample_size<-10
q<-0.3

df<-crossing(trial=seq(num_trials_per_sample_size),sample_size=seq(to=sqrt(max_sample_size),by=0.1)**2)
df<-df%>%mutate(simulation=pmap(.l=list(trial,sample_size),.f=~rbinom(.y,1,q)))
sim_df<-df%>%mutate(sample_mean=map_dbl(.x=simulation,.f=mean))

plot_dj<-ggplot()+theme_bw()+geom_point(data=sim_df,aes(x=sample_size,y=sample_mean,color="Sample",linetype="Sample"),size=0.1)
plot_dj<-plot_dj+geom_hline(aes(yintercept=q,color="Population",linetype="Population"))
plot_dj+scale_color_manual(name="Legend",values=c("Sample"="blue","Population"="red"))+scale_linetype_manual(name="Legend",values=c("Sample"="dashed","Population"="solid"))+scale_x_sqrt()
```
```{r}
set.seed(0)
num_trials<-1000
sample_size<-30
mu<-1
sigma_sqr<-3

df<-data.frame(trial=seq(num_trials))
df<-df%>%mutate(simulation=map(.x=trial,.f=~rnorm(sample_size,mu,sqrt(sigma_sqr))))
sim_df<-df%>%mutate(sample_var=map_dbl(.x=simulation,.f=var))

plot_dj<-ggplot()+theme_bw()+geom_density(data=sim_df,aes(x=sample_var,color="Sample",linetype="Sample"))+labs(x="Sample Mean",y="Density")+geom_vline(aes(xintercept = sigma_sqr,color="Population",linetype="Population"))+scale_color_manual(name="Legend",values=c("Sample"="red","Population"="blue"))+scale_linetype_manual(name="Legend",values=c("Sample"="solid","Population"="dashed"))
plot_dj
```

```{r}
set.seed(0)
num_trials<-10
max_sample_size<-10000
theta<-3

df<-crossing(trial=seq(num_trials),sample_size=seq(to=sqrt(max_sample_size),by=0.1)**2)
df<-df%>%mutate(simulation=pmap(.l=list(trial,sample_size),.f=~rcauchy(.y,location=theta)))
sim_df<-df%>%mutate(sample_mean=map_dbl(.x=simulation,.f=median))
plot_dj<-ggplot()+theme_bw()+geom_point(data=sim_df,aes(x=sample_size,y=sample_mean,color="Sample",linetype="Sample"),size=0.1)+labs(x="Sample size",y="Sample mean")+ylim(-10,10)+
  geom_hline(aes(yintercept=theta,color="Theta",linetype="Theta"),size=1)+scale_color_manual(name="Legend",values=c("Sample"="blue","Theta"="red"))+scale_linetype_manual(name="Legend",values=c("Sample"="dashed","Theta"="solid"))
plot_dj

```
```{r}
mu<-1
sigma<-2

x<-seq(mu-3*sigma,mu+3*sigma,sigma*0.01)
df_gaussian<-data.frame(x,Density=dnorm(x,mean=mu,sd=sigma),Source="Population")

df_gaussian%>%ggplot(aes(x=x,y=Density,color=Source))+geom_line()+ylab("Density function")+theme_bw()
```

```{r}
sample_size<-100
set.seed(0)

sample_data<-rnorm(sample_size,mean=mu,sd=sigma)
mu_mle<-mean(sample_data)
sigma_mle<-sd(sample_data)*sqrt((sample_size-1)/sample_size)

df_gaussian<-df_gaussian%>%rbind(data.frame(x,Density=dnorm(x,mean=mu_mle,sd=sigma_mle),Source="MLE estimate"))

df_gaussian%>%ggplot(aes(x=x,y=Density,color=Source))+ylab("Density function")+theme_bw()+geom_line()
```

```{r}
library(palmerpenguins)
```

```{r}
gentoo_weights<-penguins%>%filter(species=="Gentoo")%>%pull(body_mass_g)

n<-length(gentoo_weights)
mu_mle<-mean(gentoo_weights,na.rm=TRUE)
sigma_mle<-sd(gentoo_weights,na.rm=TRUE)*sqrt(1-(1/n))

weights<-seq(mu_mle-3*sigma_mle,mu_mle+3*sigma_mle,sigma_mle*0.001)

colors<-c("MLE density"="red","Kernel density"="blue")
estimated_density=data.frame(Weight=weights,Density=dnorm(weights,mean=mu_mle,sd=sigma_mle))

plot_dj<-ggplot()+theme_bw()+geom_line(data=estimated_density,aes(x=Weight,y=Density,color="MLE density"))
plot_dj+geom_density(data=tibble(gentoo_weights),aes(x=gentoo_weights,color="Kernel density"))+scale_color_manual(values=colors)+labs(y="Density function",color="Estimator")

```
```{r}
set.seed(0)
num_trials<-10000
sample_size<-100
theta_0<-5

log_lik_cauchy<-function(theta,sample_X){-sum(log(1+(sample_X-theta)**2))}


theta_ml<-function(sample_X){
  log_lik_cauchy_X<-function(theta){return(log_lik_cauchy(theta,sample_X))}
  theta_ml_test<-optimise(f=log_lik_cauchy_X,interval=c(-10,18),maximum=TRUE)$maximum
  return (theta_ml_test)
}

df<-data.frame(trial=seq(num_trials))%>%mutate(sample=map(.x=trial,~rcauchy(sample_size,theta_0)))

cauchy_simulation_df<-mutate(df,ml_est=map_dbl(.x=sample,.f=theta_ml))%>%mutate(med_est=map_dbl(.x=sample,.f=median))
cauchy_simulation_df

plot_df<-cauchy_simulation_df%>%
  pivot_longer(cols=c(ml_est,med_est))%>%
  mutate(name=map_chr(.x=name,~case_when(.x=="med_est"~"Median",
                                         .x=="ml_est"~"Maximum likelihood")))
plot_df

ggplot(data=plot_df,mapping=aes(x=value,color=name,linetype=name))+geom_density()+theme_bw()+xlim(c(4,6))+labs(color="",linetype="")+xlab("Estimate")+ylab("Density")
```

```{r}
set.seed(0)

num_trials<-100000
sample_size<-100
theta_0<-5 #True parameter theta

#1. log likelihood function
log_lik_cauchy<-function(theta,sample_X){return(-sum(log(1+(sample_X-theta)**2)))}

#2. mapping a sample to ML estimate of theta
theta_ml<-function(sample_X){
  log_lik_cauchy_X<-function(theta){return(log_lik_cauchy(theta,sample_X))}
  theta_ml_est<-optimise(f=log_lik_cauchy_X,interval=c(-10,18),maximum=TRUE)$maximum
  return(theta_ml_est)
}

#3.1 create num_trials samples; the size of each sample is sample_size
df<-data.frame(trial=seq(num_trials))%>%
  mutate(sample=map(.x=trial,~rcauchy(sample_size,location=theta_0)))

#3.2 for each sample,compute ML est and Median est
cauchy_simulation_df<-mutate(df,ml_est=map_dbl(.x=sample,.f=theta_ml))%>%
  mutate(med_est=map_dbl(.x=sample,.f=median))


#4. pivot
plot_df<-cauchy_simulation_df%>%
  pivot_longer(cols=c(ml_est,med_est))%>%
  mutate(name=map_chr(.x=name,~case_when(.x=="med_est"~"Median",
                                         .x=="ml_est"~"Maximum likelihood")))

#5. create plot
ggplot(plot_df,mapping=aes(x=value,color=name,linetype=name))+
  geom_density()+theme_bw()+xlim(c(4,6))+
  labs(color="",linetype="")+xlab("Estimate")+ylab("Density")

```

```{r}
alpha<-0.05
n<-80
t<-qt(1-alpha/2,df=n-1)
t
```

```{r}
library(palmerpenguins)

ggplot(data=filter(penguins,species=="Adelie"),aes(x=flipper_length_mm))+geom_density()+theme_bw()+xlab("Flipper Length(mm)")
```
```{r}
ggplot(data=filter(penguins,species=="Adelie"),aes(sample=flipper_length_mm))+theme_bw()+stat_qq()+stat_qq_line(color="blue")
```
```{r}
library(PropCIs)

```

```{r}
mu_0<-10
mu_1<-10.0005
sigma<-1

data.frame(x=seq(mu_0-3*sigma,mu_0+3*sigma,0.001))%>%
  mutate(density_0=map_dbl(.x=x,.f=~dnorm(.x,mu_0,sigma)))%>%
  mutate(density_1=map_dbl(.x=x,.f=~dnorm(.x,mu_1,sigma)))%>%
  pivot_longer(c(density_0,density_1),names_to = "Distribution",values_to="Density")%>%
  mutate(Distribution=case_when(Distribution=="density_0"~"0",
                                Distribution=="density_1"~"1"))%>%
  ggplot(aes(x=x,y=Density,color=Distribution,
             linetype=Distribution))+geom_line()+theme_bw()
```

```{r}
num_trials_per_sample_size<-100
min_sample_size<-100
sample_size_inc<-1000
max_sample_size<-30000

set.seed(0)
crossing(trial=seq(num_trials_per_sample_size),sample_size=seq(min_sample_size,max_sample_size,sample_size_inc))%>%
  mutate(sample_0=pmap(.l=list(trial,sample_size),.f=~rnorm(n=..2,mean=mu_0,sd=sigma)))%>%
  mutate(sample_1=pmap(.l=list(trial,sample_size),
                       .f=~rnorm(n=..2,mean=mu_1,sd=sigma)))%>%
  mutate(p_value=pmap_dbl(.l=list(sample_0,sample_1),
                          .f=~(t.test(..1,..2,paired=TRUE)$p.value)))%>%
  group_by(sample_size)%>%
  ggplot()+geom_smooth(aes(x=sample_size,y=p_value))+theme_bw()+
  xlab("Sample size")+ylab("P value")+
  geom_hline(aes(yintercept=0.05),linetype="dashed",color="red")
```
```{r}
library(palmerpenguins)
peng<-penguins%>%filter(species=="Adelie"|species=="Chinstrap")%>%select(species,flipper_length_mm)
ggplot()+geom_density(data=peng,aes(x=flipper_length_mm,color=species))+theme_bw()+xlab("flipper lengths")+ylab("density")
peng
```
```{r}
peng%>%ggplot(aes(sample=flipper_length_mm))+stat_qq()+stat_qq_line(color="blue")+theme_bw()+facet_wrap(~species)+xlab("theoretical")+ylab("sample")
```

```{r}
	peng
```
```{r}
mean_X<-peng%>%filter(species=="Adelie")%>%pull(flipper_length_mm)%>%mean(na.rm=TRUE) #the mean of X
mean_Y<-peng%>%filter(species=="Chinstrap")%>%pull(flipper_length_mm)%>%mean(na.rm=TRUE) # the mean of Y

sd_X<-peng%>%filter(species=="Adelie")%>%pull(flipper_length_mm)%>%sd(na.rm=TRUE) # sd of X
sd_Y<-peng%>%filter(species=="Chinstrap")%>%pull(flipper_length_mm)%>%sd(na.rm=TRUE) #sd of Y

n<-length(peng%>%filter(species=="Adelie")%>%pull(flipper_length_mm)%>%na.omit())
k<-peng%>%filter(species=="Chinstrap")%>%nrow()

s_xy<-sqrt(((n-1)*sd_X^2+(k-1)*sd_Y^2)/(n+k-2)) 

t_statistic<-(mean_X-mean_Y)/(s_xy*sqrt(1/n+1/k))
t_statistic
```

```{r}
p_value<-2*(1-pt(abs(t_statistic),df=n+k-2))
p_value
```

```{r}
t.test(flipper_length_mm~species,data=peng,var.equal=TRUE)
```

```{r}
t.test(flipper_length_mm~species,data=peng)
```

```{r}
effect_size<-(mean_X-mean_Y)/s_xy
effect_size
```

```{r}
bqb_stock_price_df%>%
  ggplot(aes(x=date,y=price))+
  geom_line()+theme_bw()+
  ylab("BQB price($)")+xlab("Date")
```

```{r}
bqb_stock_price_df%>%
  mutate(price_yesterday=lag(price))%>%  #compute a lagged version of a time series
  select(price,price_yesterday)%>%
  cor(use="pairwise.complete.obs")
```

```{r}
bqb_stock_price_df%>%
  mutate(log_diffs=log(price)-log(lag(price)))%>%
  ggplot(aes(x=log_diffs))+
  geom_density()+theme_bw()+
  xlab("Daily log differences")
```

```{r}
chi_square_test_one_sample_var<-function(sample,sigma_square_null){
  sample<-sample[!is.na(sample)] #remove any missing values
  n<-length(sample) #sample length
  chi_square_statistic<-(n-1)*var(sample)/sigma_square_null #compute test statistic
  p_value<-2*min(pchisq(chi_square_statistic,df=n-1),
                 1-pchisq(chi_square_statistic,df=n-1)) #compute the p-value
  return(p_value)
}
```

```{r}
bqb_stock_price_df%>%
  mutate(log_diffs=log(price)-log(lag(price)))%>%
  pull(log_diffs)%>%
  chi_square_test_one_sample_var(sample=.,sigma_square_null = (1/100)^2)
```

```{r}
penguins_gwf<-penguins%>%
  filter(species=="Gentoo")%>%
  select(body_mass_g,flipper_length_mm)
penguins_gwf
```

```{r}
#MLE for mean
mu_gwf<-map_dbl(.x=penguins_gwf,.f=~mean(.x,na.rm=TRUE))
mu_gwf
```

```{r}
#MVUE of covariance
Sigma_gwf<-cov(penguins_gwf,use="complete.obs")
Sigma_gwf
```

```{r}
# MLE of the covariance
Sigma_gwf_MLE<-cov(penguins_gwf,use="complete.obs")*(n-1)/n
Sigma_gwf_MLE
```


```{r}
library(tidyverse)
library(palmerpenguins)

peng_total<-penguins%>%
  select(body_mass_g,flipper_length_mm,species)%>%
  filter(species!="Gentoo")%>%
  drop_na()%>%
  mutate(species=as.numeric(species=="Adelie"))
peng_total
```
```{r}
num_total<-peng_total%>%nrow() # number of penguin data
num_train<-floor(num_total*0.75) #number of train examples
num_test<-num_total-num_train #number of test samples

set.seed(1) # set random seed for reproducibility
test_inds<-sample(seq(num_total),num_test) # random sample of test indicies
train_inds<-setdiff(seq(num_total),test_inds) # training data indicies

peng_train<-peng_total%>%filter(row_number() %in% train_inds) #train data
peng_test<-peng_total%>%filter(row_number() %in% test_inds) #test data
```

```{r}
peng_train_x<-peng_train%>%select(-species) #train feature vectors
peng_train_y<-peng_train%>%pull(species) #train labels

peng_test_x<-peng_test%>%select(-species) # test feature vector
peng_test_y<-peng_test%>%pull(species) #test labels
```

